/*
Structural patterns
Структурные ПАТТЕРНЫ
Это Коммуникация между обектами программы.
Паттерн АДАПТЕР -  Место для применения адаптера )

Цель АДАПТЕРА- Дть пльзователю воспользоваться интерфейсом обычным способом
даже если не поддерживается сервисный код.
ПРИМЕР : Машина едет по рельсам через привод На телеге(Картинка)

Пример: У нас есть 2 класса с несовместимыми интерфейсами
ШАГИ
1) Убедиться в том что у нас есть хотябы 2 класса с несовместимыми интерфейсами
(Это могут быть клиенты с разными несовместимыми интерфейсами)
2) Описать класса этих приложений через которые они бы смогли работать с сервисами
3) Создать класс Адаптер

МОСТ
цель - Отделить Абстракцию от Реализации, чтобы они могли реализоваться не зависимо друг от друга.
ПРИМЕР: У ПК игры есть двери и надо подобрать ключи. 
То мост связываем таким обрпзом 

Мост нужен для того чтобы Два разных класса смогли работать вместе через классы Адаптеры.
Нужно лишь определить их общие свойства И по ним определяем общьюю совместимость.
Или когда видим чо у нас есть общее свойство. То можно реализовать Мост.

Объект Типа - Это когда есть еще какое то поведение ю ТО его просто тоже вынести в отдельный класс.
( своиства от цвета не зависят но тоже нужны : пиксели , форма кисти, Размер точки.)

(Смотри схему UML - 

Паттерн Компоненнт - Это Кпросто коробочка в коробочке. Дерево.
Они наследуются все реализуют методы родителя . и допустим есть лис (регистрации  - действий , Туда идет то что не будет всебя в кладывать )

//////////////////////////////////////////////////////

ДЕКОРАТОР
Разница между Декоратором и фасадом -
Фасад упрощает работу со структурами которые он держит
Декоратор добавляет компоненты которые можно переиспользовать 
Декоратор - Позволяет динамически добавлять новые компоненты и функциональность
Задача - Разделить монолитный класс на компоненты различной реализации.
 
 в случае Объект типа - Задача добавить текущий и избавиться от наследования.
 Объект тип - появляется сразу если нужно хранить свойства.
 Декоратор - это рефакторинг кода для причесывания уже существующих задач
 Рефакторинг - Это улучшение кода .

 Декоратор добавляет динамически функциональность. Рандомно можно сделать.
 Добавляем в виде декоратора новые вещи и старый код начинает нормально функционировать.
 Интерфейс класса мы не нарушаем а просто добавляем новые свойства.
 Декоратор позволяет легко менять класс не трогая основной код.

 ///////////////////////////////////////////////////////////////////////////////////////////
 DIP (Dependency Inversion Principle) - это принцип инверсии зависимостей, который гласит,
 что зависимости должны быть инвариантными по отношению к абстракциям.
 То есть, зависимости должны зависеть от абстракций, а не от реализаций.

 DIP помогает создавать модульные и расширяемые системы,
 где зависимости могут быть легко заменены или обновлены без изменения кода,
 который их использует.

 Пример : Художник 
 Не холст решает что рисовать а Художник
 Графическая  панель не  может что то рисовать Передай кругу что надо рисовать

  Пример: Не у ноги метод пнуть А у табуретки должен быть метод Быть Пнутой.
  То есть, зависимости должны зависеть от абстракций, а не от реализаций.

  Пример: Граф Движок
  не у Движка есть метод Что то нарисовать А у Предмета которым рисуем должен быть метод нарисовать
  Это оБъект должен знать что надо сделать!!!

  Пример Переставить коробку
  Коробка должна знать как ее переставить
  Тоесть сам предмет должен знать как его переставить.


 ///////////////////////////////////////////////////////////////////////////////////////////



*/